# -*- coding: utf-8 -*-
"""SUP3R"""

import tensorflow as tf
from tensorflow.keras.metrics import mean_squared_error
from phygnn import CustomNetwork, GradientUtils


class SpatioTemporalSup3r(GradientUtils):
    """Spatio Temporal Super Resolution GAN model."""

    def __init__(self, gen_layers, disc_t_layers, disc_s_layers):
        """
        Parameters
        ----------
        gen_layers : list | str
            Hidden layers input argument to phygnn.base.CustomNetwork for the
            generative super resolving model. Can also be a str filepath to a
            json config file containing the input layers argument.
        disc_t_layers : list | str
            Hidden layers input argument to phygnn.base.CustomNetwork for the
            discriminative temporal model. Can also be a str filepath to a json
            config file containing the input layers argument.
        disc_s_layers : list | str
            Hidden layers input argument to phygnn.base.CustomNetwork for the
            discriminative spatial model. Can also be a str filepath to a json
            config file containing the input layers argument.
        """

        self._gen = CustomNetwork(hidden_layers=gen_layers, name='Gen')
        self._disc_t = CustomNetwork(hidden_layers=disc_t_layers, name='DiscT')
        self._disc_s = CustomNetwork(hidden_layers=disc_s_layers, name='DiscS')

    @property
    def generator(self):
        """Get the generative model.

        Returns
        -------
        phygnn.base.CustomNetwork
        """
        return self._gen

    @property
    def disc_spatial(self):
        """Get the spatial discriminator model.

        Returns
        -------
        phygnn.base.CustomNetwork
        """
        return self._disc_s

    @property
    def disc_temporal(self):
        """Get the temporal discriminator model.

        Returns
        -------
        phygnn.base.CustomNetwork
        """
        return self._disc_t

    def calc_loss_gen(self, y_true, y_generated, y_disc_s, y_disc_t):
        """Calculate the loss term for the generator model.

        Parameters
        ----------
        y_true : tf.Tensor | np.ndarray
            Ground truth high resolution spatiotemporal data.
        y_generated : tf.Tensor
            Superresolved high resolution spatiotemporal data generated by the
            generative model.
        y_disc_s : tf.Tensor
            Raw discriminator outputs from the spatial discriminator model
            predicting only on y_generated (not on y_true).
        y_disc_t : tf.Tensor
            Raw discriminator outputs from the temporal discriminator model
            predicting only on y_generated (not on y_true).

        Returns
        -------
        loss_gen_s : tf.Tensor
            0D tensor generator model loss for the spatial component of the
            super resolution generated output. If self.alpha_advers==0, this is
            just the generator content loss.
        loss_gen_t : tf.Tensor
            0D tensor generator model loss for the temporal component of the
            super resolution generated output. If self.alpha_advers==0, this is
            just the generator content loss.
        """

        loss_gen_content = mean_squared_error(y_true, y_generated)
        loss_gen_content = tf.reduce_mean(loss_gen_content)
        loss_gen_s = loss_gen_content
        loss_gen_t = loss_gen_content
        if self.alpha_advers > 0:
            # note that these have flipped labels from the discriminator
            # loss because of the opposite optimization goal
            loss_disc_s_gen = tf.nn.sigmoid_cross_entropy_with_logits(
                logits=y_disc_s, labels=tf.ones_like(y_disc_s))
            loss_disc_t_gen = tf.nn.sigmoid_cross_entropy_with_logits(
                logits=y_disc_t, labels=tf.ones_like(y_disc_t))

            loss_gen_s += self.alpha_advers * tf.reduce_mean(loss_disc_s_gen)
            loss_gen_t += self.alpha_advers * tf.reduce_mean(loss_disc_t_gen)

        return loss_gen_s, loss_gen_t

    @staticmethod
    def calc_loss_disc(y_disc_true, y_disc_gen):
        """Calculate the loss term for the discriminator model (either the
        spatial or temporal discriminator).

        Parameters
        ----------
        y_disc_true : tf.Tensor
            Raw discriminator outputs from the discriminator model predicting
            only on y_true (not on y_generated).
        y_disc_gen : tf.Tensor
            Raw discriminator outputs from the discriminator model predicting
            only on y_generated (not on y_true).

        Returns
        -------
        loss_disc : tf.Tensor
            0D tensor discriminator model loss for either the spatial or
            temporal component of the super resolution generated output.
        """

        # note that these have flipped labels from the generator
        # loss because of the opposite optimization goal
        logits = tf.concat([y_disc_true, y_disc_gen], axis=0)
        labels = tf.concat([tf.ones_like(y_disc_true),
                            tf.zeros_like(y_disc_gen)], axis=0)

        loss_disc = tf.nn.sigmoid_cross_entropy_with_logits(logits=logits,
                                                            labels=labels)
        loss_disc = tf.reduce_mean(loss_disc)

        return loss_disc

    def calc_loss(self, y_true, y_generated, include_gen=True,
                  include_disc_s=True, include_disc_t=True):
        """Calculate the GAN loss function using generated and true high
        resolution data.

        Parameters
        ----------
        y_true : tf.Tensor | np.ndarray
            Ground truth high resolution spatiotemporal data.
        y_generated : tf.Tensor
            Superresolved high resolution spatiotemporal data generated by the
            generative model.
        include_gen : bool
            Flag to calculate and include the generative loss term in the loss
            function. This includes the generative content loss and the
            generative portion of the discriminator losses (both space and
            time).
        include_disc_s : bool
            Flag to calculate and include the spatial discriminator loss term
            in the loss function.
        include_disc_t : bool
            Flag to calculate and include the temporal discriminator loss term
            in the loss function.

        Returns
        -------
        loss_disc : tf.Tensor
            0D tensor representing the full GAN loss term. This can be a
            summation of up to four individual loss terms from the generative /
            discriminative models and for their respective spatial / temporal
            components or models.
        """

        loss_gen_s = tf.constant(0.0, dtype=tf.float32)
        loss_gen_t = tf.constant(0.0, dtype=tf.float32)
        loss_disc_s = tf.constant(0.0, dtype=tf.float32)
        loss_disc_t = tf.constant(0.0, dtype=tf.float32)

        y_disc_s_true = self.disc_spatial.predict(y_true)
        y_disc_t_true = self.disc_temporal.predict(y_true)
        y_disc_s_gen = self.disc_spatial.predict(y_generated)
        y_disc_t_gen = self.disc_temporal.predict(y_generated)

        if include_gen:
            loss_gen_s, loss_gen_t = self.calc_loss_gen(y_true, y_generated,
                                                        y_disc_s_gen,
                                                        y_disc_t_gen)

        if include_disc_s:
            loss_disc_s = self.calc_loss_disc(y_disc_s_true, y_disc_s_gen)

        if include_disc_t:
            loss_disc_t = self.calc_loss_disc(y_disc_t_true, y_disc_t_gen)

        loss = loss_gen_s + loss_gen_t + loss_disc_s + loss_disc_t
        return loss
